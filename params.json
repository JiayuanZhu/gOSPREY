{"name":"gOSPREY","tagline":"Open Source Protein REdesign for You on a GPU!","body":"Introduction to gOSPREY\r\n=======================\r\nWelcome to the website for the gOSPREY!\r\n\r\ngOSPREY is the abbreviation for <strong>O</strong>pen <strong>S</strong>ource\r\n<strong>P</strong>rotein <strong>RE</strong>design for <strong>Y</strong>ou on a\r\n<strong>G</strong>PU.  It enables the user to utilize a GPU to accelerate the\r\nprocedure of protein design.\r\n\r\ngOSPREY is base on the software suite OSPREY, developed by the [Donald\r\nLab](http://www.cs.duke.edu/donaldlab/osprey.php) from Duke University.  Here is\r\na short introduction for OSPREY:\r\n\r\n> OSPREY incorporates several different algorithmic modules for structure-based\r\n> protein design, including a number of powerful Dead-End Elimination algorithms\r\n> and the ensemble-based K\\* algorithm for protein-ligand binding prediction.\r\n> OSPREY allows the incorporation of continuous protein side-chain and\r\n> continuous or discrete backbone flexibility, while maintaining provable\r\n> guarantees with respect to the input model (input structure, rotamer library,\r\n> energy function, and any backbone perturbations) for a given protein design\r\n> problem. See full details of the different algorithmic modules in OSPREY.\r\n\r\nCurrently, the version of gOSPREY that you can download is based on OSPREY v2.1\r\nbeta with some improvements, including:\r\n\r\n* A robust CUDA implementation of GA\\*, a variant of A\\* algorithm runs on any\r\n  CUDA-compatiable device in a massive parallel fashion.\r\n\r\n* Improved computation of heuristic function for structure-based computation\r\n  protein deisgn, which is able to acceleate the protein design procedure\r\n  significently without any parallelization.\r\n\r\n* An implementation of GSMA\\* on CUDA, which is able to continue the design\r\n  process even if the system is out of memory.\r\n\r\n* An alpha release of OpenCL implementation of GA\\*.  This is not package by\r\n  default.  Advanced users with coding ability may want to try it in\r\n  `native/additional` directory.\r\n\r\n* A nice and clean build and package system based on CMake so you should not\r\n  worry about the ugly compilation process of CUDA (`nvcc`) and Java Native\r\n  Interface!\r\n\r\nRequirement\r\n-----------\r\n\r\n### Hardware Requirement\r\nIn order to use the function of GPU acceleration, the user must own a\r\nCUDA-compatible video card, with the\r\n[Compute-Capability](http://docs.nvidia.com/cuda/cuda-c-programming-guide/) at\r\nleast 1.2.\r\n\r\n### Software Dependency\r\nIn order to run gOSPREY, a user must have the following installed:\r\n*  **A working Linux environment**\r\n\r\n*  A Java Development Kit 1.7 implementation\r\n\r\n*  [NVIDIA CUDA Software Development Kit](http://developer.nvidia.com/cuda)\r\n\r\n*  a recent gcc/g++ release\r\n\r\n*  cmake 2.8+\r\n\r\nInstallation\r\n------------\r\n1.  Check the environemnt.  Make sure you have CUDA installed on your Linux box.\r\n    And make sure the `deviceQuery` utility from `1_Utilities/deviceQuery`\r\n    shipped by CUDA SDK returns normally.\r\n\r\n2.  Download the source from github.  If you have `git` installed, you can\r\n    `cd` into your working directory and perform:\r\n\r\n        $ cd ~/src\r\n        $ git clone https://github.com/zhou13/gOSPREY.git\r\n\r\n    Otherwise, you need to download the tarball from the website and decompress\r\n    it by yourself.\r\n\r\n3.  Create a build directory for gOSPREY:\r\n\r\n        $ cd gOSPREY\r\n        $ mkdir build\r\n\r\n4.  Run `cmake` to generate the Makefile.  Because gOSPREY uses Java Native\r\n    Interface, a dynamic library must be installed under the\r\n    `java.library.path`.  On most system, a prefix on `/usr` should do this job:\r\n\r\n        $ cd build\r\n        $ cmake -DCMAKE_INSTALL_PREFIX=/usr ..\r\n\r\n5.  Comiple gOSPREY and install the library:\r\n\r\n        $ make\r\n        $ sudo make install\r\n\r\nUsage\r\n-----\r\nThanks for the CMake and jar package system, the use of gOSPREY is pretty easy.\r\nAfter the `make` in the installation procedure, a file called `osprey.jar` will\r\nbe generated.  This contains all the Java class needed by gOSPREY.  You can\r\ncopy/move this file to anyplace that make you feel comfortable.\r\n\r\nLet's use `ppi_GPU` as an example. You can find it under `doc/example/ppi_GPU/`.\r\nSuppose you are still under the `build` directory.  Execute:\r\n\r\n        $ cd ../doc/example/ppi_GPU\r\n        $ java -jar ../../../build/osprey.jar doDEE System.cfg DEE.cfg\r\n\r\nHope that everything goes smooth for you!\r\n\r\nConfiguration\r\n-------------\r\nThe document of original OSPREY can be found at `doc/manual.pdf`.  Besides that,\r\ngOSPREY provided some additional parameter that a user need to configure.  You\r\ncan find an example under `doc/example/ppi_GPU/KStar.cfg`:\r\n\r\n        enableAStarJava true\r\n        enableAStarNativeC true\r\n        enableAStarCUDA true\r\n        maxNativeCPUMemory 5032706048\r\n        maxNativeGPUMemory 5032706048\r\n        numGPUWorkGroup 4\r\n        numGPUWorkItem 192\r\n        numGPUWorkItem2 192\r\n        shrinkRatio 1\r\n\r\n`enableAStarJava` determines whether the A\\* module implemented by origianl\r\nOSPREY will be enabled.  `enableAStarNativeC` determines whether the A\\*\r\nmodule implemented using native machine code through JNI with heuristic function\r\noptimization will be used.  `enableAStarCUDA` determines whether GA\\* will be\r\nenabled through CUDA.  If more than one modules are enabled, gOSPREY will\r\ncompare the results returned by different modules to verily the correctness.\r\n\r\nIf CUDA is enable, `numGPUWorkGroup` \\* `numGPUWorkItem` is the number of\r\nparallel queues used in GA\\*.  `numGPUWorkItem2` is the number of work items for\r\nan individual work group when calculating the heuristic function in parallel.\r\nWhen `shrinkRatio` is not equal to one, GSMA\\* will be enabled.  In that case,\r\nwhen the system runs out of memory, a fraction of nodes specified by `shrinkRatio`\r\nwill be dropped.  You may want to set it to `0.5`.\r\n\r\nSupport or Contact\r\n------------------\r\nHaving trouble at installation or function? Feel free to contact the authors:\r\nbroken.zhou@gmail.com.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}